
# __________________________________________________________________________________________________________________________________
# TYPES -- for queries.graphql and mutations.graphql
# __________________________________________________________________________________________________________________________________
# __________________________________________________________________________________________________________________________________
# type createProduct {
# 	id: ID!
# 	description: String!
# 	title: String!
# 	image: String!
# }
  """
  type that defines a product for StepZen including data from Agility and Shopify
  """
type ProductRest {
  title: String
  description: String
  image: String
  createdAt: String
  agilityId: ID!
  admin_graphql_api_id: String
  hero: Boolean
  type: String
  slug: String
  use: String
  # price: String
  shopifyId: ID!
  audience: String
  #variant_id: ID!
  variants: [ShopifyProductVariants]
    @materializer(
      query: "shopifyProductVariants"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  images: [ShopifyProductImages]
    @materializer(
      query: "shopifyProductImages"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  options: [ShopifyProductOptions]
    @materializer(
      query: "shopifyProductOptions"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  productGraphql: Product
    @materializer(
      query: "product"
      arguments: [{ name: "id", field: "admin_graphql_api_id" }]
    )
}

  """
  defines Agility product type
  """
type AgilityProduct {
  title: String
  Title: String
  description: String
  shopifyId: ID!
  image: String
  createdAt: String
  agilityId: ID!
  audience: String
  hero: Boolean
  type: String
  slug: String
  use: String
}

  """
  defines Shopify product type
  """
type ShopifyProduct {
  title: String!
  description: String!
  admin_graphql_api_id: String
  # price: String
  createdAt: String!
  shopifyId: ID!
  variants: [ShopifyProductVariants]
    @materializer(
      query: "shopifyProductVariants"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  images: [ShopifyProductImages]
    @materializer(
      query: "shopifyProductImages"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  options: [ShopifyProductOptions]
    @materializer(
      query: "shopifyProductOptions"
      arguments: [{ name: "product_id", field: "shopifyId" }]
    )
  productGraphql: Product
    @materializer(
      query: "product"
      arguments: [{ name: "id", field: "admin_graphql_api_id" }]
    )
}

  """
  defines Shopify product variants
  """
type ShopifyProductVariants {
  id: ID!
  product_id: ID!
  price: String
  position: Int!
  inventory_quantity: Int
  requires_shipping: Boolean
  weight: Float
}

  """
  defines Shopify product images
  """
type ShopifyProductImages {
  id: ID!
  product_id: ID!
  alt: String
  width: Float
  height: Float
  src: String
  position: String
}
  """
  defines Shopify product options
  """
type ShopifyProductOptions {
  id: ID!
  product_id: ID!
  name: String
  position: String
  values: String
}

  """
  defines map type to link Agility and Shopify ids
  """
type Map {
  agilityId: ID!
  shopifyId: ID!
}
# type Order {
#   id: ID!
#   quantity: Int!
#   variant_id: ID!
#   email: String!
#   fulfillment_status: String!
#   send_fulfillment_receipt: Boolean!
# }
# type IdWrapper {
#   id: ID!
# }
# type ShopifyCreateOrder {
# 	variant_id: ID!
# 	email: String!
# 	fulfillment_status: String!
# 	send_fulfillment_receipt: Boolean!
# 	send_fulfillment_receipt: Boolean!
# }


# __________________________________________________________________________________________________________________________________
# QUERIES
# __________________________________________________________________________________________________________________________________
# __________________________________________________________________________________________________________________________________
type Query {
  #__________________
  # AGILITY QUERIES
  #___________________
  """
  returns a product via a sequence -- first a query to Agility, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productByAgilityId(agilityId: ID!): ProductRest
    @sequence(
      steps: [
        { query: "agilityProduct" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )
  """
  returns a product via a sequence -- first a query to Agility, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productByAgilitySlug(slug: String!): ProductRest
    @sequence(
      steps: [
        { query: "agilityProductBySlug" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )

  """
  returns a product via a sequence -- first a query to Agility by type, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productsByAgilityType(type: String!): [ProductRest]
    @sequence(
      steps: [
        { query: "agilityProductsByType" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )
  """
  returns a product via a sequence -- first a query to products based on whether they're at stage (0 or 1), then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productsAtStage(stage: Int!): [ProductRest]
    @sequence(
      steps: [
        { query: "agilityProductsAtStage" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )

  """
  returns a product via a sequence -- first a query to products based on audience, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productsByAudience(audience: String!): [ProductRest]
    @sequence(
      steps: [
        { query: "agilityProductsByAudience" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )
  """
  returns a product via a sequence -- first a query to products based on their content list, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productsByContentList(list: String!): [ProductRest]
    @sequence(
      steps: [
        { query: "agilityProductsByContentList" }
        { query: "shopifyProduct" }
        { query: "collect" }
      ]
    )

  """
  returns a product via a sequence -- first a query to Agility products, then to Shopify using the AgilityCMS field, shopifyId, then 'collect' returns all the info
  """
  productsRest: [ProductRest]
    @sequence(
      steps: [
        { query: "shopifyProducts" }
        { query: "agilityProductByShopifyId" }
        { query: "collect" }
      ]
    )
    collect(
      title: String
        audience: String
        description: String
        image: String
        createdAt: String
        admin_graphql_api_id: String
        # price: String
        type: String
        slug: String
        agilityId: ID
        shopifyId: ID
        hero: Boolean
        use: String
              ): ProductRest @connector(type: "echo")

  """
  returns an Agility Product with all of the info from Agility CMS
  """
  agilityProduct(agilityId: ID!): AgilityProduct
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/item/$agilityId"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
    )

  """
  queries Agility products based on audience
  """
  agilityProductsByAudience(audience: String!): [AgilityProduct]
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=fields.audience%5Beq%5D%22$audience;%22&take=50"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
      resultroot: "items[]"
    )
  """
  queries Agility products based on shopifyId
  """
  agilityProductByShopifyId(shopifyId: ID!): AgilityProduct
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=fields.shopifyId%5Beq%5D%22$shopifyId;%22"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "title", path: "fields.title" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "image", path: "fields.image" }
      ]
      resultroot: "items[]"
    )
  """
  queries Agility products based on shopifyId
  """
  agilityProductBySlug(slug: String!): AgilityProduct
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=fields.slug%5Beq%5D%22$slug;%22"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "title", path: "fields.title" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "image", path: "fields.image" }
      ]
      resultroot: "items[]"
    )

  """
  queries Agility products based on type
  """
    agilityProductsByType(type: String!): [AgilityProduct]
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=fields.type%5Beq%5D%22$type;%22"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
      resultroot: "items[]"
    )

  """
  queries Agility products based on content list
  """
  agilityProductsByContentList(list: String!): [AgilityProduct]
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=properties.referenceName%5Beq%5D%22$list;%22&take=50"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
      resultroot: "items[]"
    )

  """
  queries Agility products based on whether they're at stage (0 or 1)
  """
  agilityProductsAtStage(stage: Int!): [AgilityProduct]
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?Filter=properties.state%5Beq%5D$stage"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
      resultroot: "items[]"
    )

  """
  returns all Agility products
  """
  agilityProducts: [AgilityProduct]
    @rest(
      endpoint: "https://$instance;-api.agilitycms.cloud/preview/en-us/list/products?take=50"
      configuration: "agility_config"
      setters: [
        { field: "audience", path: "fields.audience" }
        { field: "description", path: "fields.description" }
        { field: "createdAt", path: "properties.modified" }
        { field: "agilityId", path: "contentID" }
        { field: "shopifyId", path: "fields.shopifyId" }
        { field: "image", path: "fields.image" }
        { field: "hero", path: "fields.hero" }
        { field: "type", path: "fields.type" }
        { field: "slug", path: "fields.slug" }
        { field: "use", path: "fields.use" }
      ]
      resultroot: "items[]"
    )
  #__________________
  # SHOPIFY QUERIES
  #___________________
  # newProducts(date: String!): [ShopifyProduct]
  # 	@rest(
  # 		endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products.json?created_at_min=$date;"
  # 		resultroot: "products[]"
  # 		setters: [
  # 			{ field: "shopifyId", path: "id" }
  # 			{ field: "price", path: "variants[].price " }
  # 			{ field: "title", path: "title" }
  # 			{ field: "description", path: "body_html" }
  # 			{ field: "createdAt", path: "created_at" }
  # 			{ field: "variant_id", path: "variants[].id"}
  # 		]
  # 		configuration: "shopify_config"
  # 	)

  """
  returns a Shopify product, given an id
  """
  shopifyProduct(shopifyId: ID!): ShopifyProduct
    @rest(
      endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products/$shopifyId;.json"
      resultroot: "product"
      setters: [
        { field: "shopifyId", path: "id" }
        # { field: "price", path: "variants[].price " }
        { field: "title", path: "title" }
        { field: "description", path: "body_html" }
        { field: "createdAt", path: "created_at" }
        # { field: "variant_id", path: "variants[].id" }
      ]
      configuration: "shopify_config"
    )

  """
  returns all Shopify products
  """
  shopifyProducts: [ShopifyProduct]
    @rest(
      endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products.json"
      resultroot: "products[]"
      setters: [
        { field: "shopifyId", path: "id" }
        # { field: "price", path: "variants[].price " }
        { field: "description", path: "body_html" }
        { field: "createdAt", path: "created_at" }
        # { field: "variant_id", path: "variants[].id" }
      ]
      configuration: "shopify_config"
    )

  """
  returns Shopidy product variants by id
  """
  shopifyProductVariants(shopifyId: ID!): [ShopifyProductVariants]
    @rest(
      endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products/$shopifyId;.json"
      resultroot: "product.variants[]"
      configuration: "shopify_config"
    )

  """
  returns Shopidy product images by id
  """
  shopifyProductImages(shopifyId: ID!): [ShopifyProductImages]
    @rest(
      endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products/$shopifyId;.json"
      resultroot: "product.images[]"
      configuration: "shopify_config"
    )

  """
  returns Shopidy product options by id
  """
  shopifyProductOptions(shopifyId: ID!): [ShopifyProductOptions]
    @rest(
      endpoint: "https://$store_name.myshopify.com/admin/api/2021-04/products/$shopifyId;.json"
      setters: [{ field: "values", path: "values[]" }]
      resultroot: "product.options[]"
      configuration: "shopify_config"
    )
}
